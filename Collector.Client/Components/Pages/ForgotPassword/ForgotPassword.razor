@page "/ForgotPassword"
@using Collector.Client.Components.Pages.Register
@using Collector.Client.Dtos.ForgotPassword
@using Collector.Client.Dtos
@using Collector.Client.Helpers
@using Collector.Client.Services.Password
@inject NavigationManager Navigation
@inject IPasswordService passwordService
@inject IJSRuntime JS


<div class="main-container">
    <!-- Form Container -->
    <div class="form-container">
        <MudForm @ref="form" Model="@forgotPasswordModel" OnValidSubmit="HandleValidSubmit">

            <!-- Progress Bar -->
            <ProgressBar Value="Value"/>


            <!-- Step Header -->
            <div class="step-header">
                <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
                <MudText Typo="Typo.body1" Style="color:#8B8C89; margin-right: 1px;">Recuperar Contraseña</MudText>
            </div>

            <div>
                <button class="back-to-login-btn" @onclick="NavigateToLogin">
                    <svg xmlns="http://www.w3.org/2000/svg" height="32" viewBox="0 0 36 32" width="36">
                        <path d="M0 0h24v24H0z" fill="none" />
                        <path d="M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21z" fill="#BDBBBB" transform="scale(1.4, 1.4)" />
                    </svg>
                    Login
                </button>
            </div>
            <!-- Form Steps -->
            @if (step == 1)
            {
                <p class="custom-message-info">Ingrese su correo electronico, para recuperar su contraseña.</p>
                <label class="custom-label">Correo Electronico</label>
                <MudTextField @bind-Value="@forgotPasswordModel.Email" Required="true" Variant="Variant.Outlined" Style="color:white;" />
            }
            @if (step == 2)
            {
                <label class="custom-label">Codigo de verificacion</label>
                <MudTextField @bind-Value="@forgotPasswordModel.Code" Required="true" Variant="Variant.Outlined" Style="color:white;" />
            }
            @if (step == 3)
            {
                <label class="custom-label">Contraseña</label>
                <MudTextField @bind-Value="@forgotPasswordModel.NewPassword" Required="true" InputType="InputType.Password" Variant="Variant.Outlined" Style="color:white;" />
                <label class="custom-label mt-5">Confirmar Contraseña</label>
                <MudTextField @bind-Value="@forgotPasswordModel.ConfirmPassword" Required="true" InputType="InputType.Password" Variant="Variant.Outlined" Style="color:white;" />
                <p class="custom-message">La contraseña debe contener al menos: 1 letra, 8 caracteres, 1 número y 1 carácter especial ("@@", "!", "#", ".") </p>
            }
            <!-- Navigation Buttons -->
            <div class="buttons-container">
                @if (step < 4)
                {
                    <MudButton OnClick="NextStep" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Siguiente</MudButton>
                }
                else
                {
                    <MudButton Type="Submit" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Registrar</MudButton>
                }
                @if (step > 1)
                {
                    <MudButton OnClick="PreviousStep" Variant="Variant.Outlined" Style="background-color:transparent; width: 180px; border: 3px solid #767572; color: #D1D5DB; border-radius: 0.5rem;font-weight: bold;">Paso anterior</MudButton>
                }
            </div>

        </MudForm>
    </div>
    <!-- Aside Background -->
    <div class="aside-background"></div>

</div>


@code {
    private int step = 1;
    private MudForm form;
    public double Value {get; set;}
    private ForgotPasswordModel forgotPasswordModel = new();

    public void AdvanceProgress()
    {
        Value += 33.3;
        StateHasChanged();
    }

    public void GoBackProgress()
    {
        Value -= 33.3;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AdvanceProgress();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task NextStep()
    {
        switch (step)
        {
            case 1:
                forgotPasswordModel = await passwordService.ForgotPasswordAsync(forgotPasswordModel);
                if (forgotPasswordModel.IsError)
                {

                    await ShowAlert("Error al verificar correo", forgotPasswordModel.ErrorMessage, "error");
                    forgotPasswordModel.IsError = false;
                    forgotPasswordModel.ErrorMessage = string.Empty;
                }
                else
                {
                    await ShowAlert("Correo de recuperacion enviado", "Se le ha enviado un correo con un codigo, tiene 15 minutos para validarlo");
                    step++;
                }

                break;
            case 2:
                await passwordService.VerifyCodeAsync(forgotPasswordModel);
                step++;
                break;

            case 3:
                await passwordService.ResetPasswordAsyncS(forgotPasswordModel.Email, forgotPasswordModel.NewPassword);
                step++;
                break;
        }
    }

    private void PreviousStep()
    {
        if (step > 1)
            step--;
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("Formulario enviado exitosamente.");
    }

    private string GetImagePreview(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        file.OpenReadStream().ReadAsync(buffer);
        return $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task ShowAlert(string title, string message, string? icon = "success")
    {
        await JS.InvokeVoidAsync("showSweetAlert", title, message, icon);
    }
}
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function showSweetAlert(title, message, icon) {
        Swal.fire({
            title: title,
            text: message,
            icon: icon
        });
    }
</script>