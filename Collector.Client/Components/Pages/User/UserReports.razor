@page "/User/Reports"
@using Collector.Client.Dtos
@using Collector.Client.Dtos.Reports
@using Collector.Client.Services
@using Collector.Client.Services.Reports
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@inject ReportsService reportService;
@inject NavigationManager navManager;
@inject Collector.Client.SessionHelpers.SessionManager sesionManager

@{
    <script src="https://kit.fontawesome.com/7302c44b99.js" crossorigin="anonymous"></script>
}

<div class="first-container">

    <AuthorizeView Roles="Person">
        <Authorized>
            <div class="nav-item px-3">
                <a href="../Components/Pages/User/CreateReports.razor" class="btn btn-danger">Log Out</a>
            </div>
        </Authorized>
    </AuthorizeView>

    @if (reportDtos.Any())
    {
        <div class="d-flex justify-content-between">
            <h2 class="title">REPORTES</h2>
            <button @onclick="NavigateToCreateReports" class="btn-new-report btn mt-3">Nuevo Reporte</button>
        </div>

        <div class="secundary-container">

            @foreach (var reports in reportDtos)
            {
                <div class="card card-content">
                    <img class="card-img-top" src="https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ1sCkwCuiG0ibXP5xmF61qsQQ80Z0PE4MC7jjQw1PyG1oAKF-QFEKwoBnc7_aDBudFVJftO0zACm6EVpjIrnQYjRz0aHVJosmehRm5Ow"
                         alt="Avatar">
                    <div class="card-body mx-3">

                        <div class="card-body-container">
                            <h6>@reports.Title</h6>
                            <p>@reports.Name</p>
                        </div>

                        <div>
                            <div class="d-flex date-container">
                                <p>@reports.Status</p>
                                <p class="mx-4">01-08-2024</p>
                            </div>
                            <div class="btn-container">
                                <a class="btn btn-details">
                                    Ver más detalles
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         height="24" viewBox="0 0 24 24" width="24">
                                        <path d="M0 0h24v24H0z" fill="none" />
                                        <path d="M16.01 11H4v2h12.01v3L20 12l-3.99-4z" fill="white" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="pagination-container m-4">
            <MudPagination Class="custom-pagination" Size="Size.Large" Rectangular="true" Variant="Variant.Filled" Count="6" />
        </div>
    }
    else
    {
        <h2 class="title">REPORTES</h2>
        <div class="container-no-reports col-6 offset-12 mt-3">
            <div class="text-center">
                <i class="fa-solid fa-clipboard fa-2xl" style="color: #ededed;"></i>
                <h5 class="card-title mt-2 text-secondary">No se han encontrado reportes registrados ¿desea crear uno?</h5>
                <a href="/User/Create/Reports" class="btn-new-report btn mt-2">Nuevo Reporte</a>
            </div>
        </div>  
    }
</div>

<style>
    .custom-pagination .mud-pagination-item {
        color: white;
    }
</style>

@code {
    private List<ReportDto>? reportDtos { get; set; } = new();
    private ClaimsPrincipal _userPrincipal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await sesionManager.GetAuthenticationStateAsync();
            StateHasChanged();  // Forzamos un redibujado después de haber realizado la verificación.
        }
    }

    public void NavigateToCreateReports()
    {
        navManager.NavigateTo("/User/Create/Reports");
    }

    protected override async Task OnInitializedAsync()
    {
        reportDtos = await GetUserReports();
        await base.OnInitializedAsync();
    }

    private async Task<List<ReportDto>> GetUserReports(string UserId = "9zeirWQJnldZ2qizLbalnxjxpQh2")
    => await reportService.GetAllReportsByUserId(UserId);
}