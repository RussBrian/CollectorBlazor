@page "/RegisterUser"
@using Collector.Client.Dtos.Login
@using Collector.Client.Dtos
@inject NavigationManager Navigation


<div class="main-container">
    <div class="form-container">
        <MudForm @ref="form" Model="@reqUserDto" OnValidSubmit="HandleValidSubmit">
            <div class="custom-progress-bar">
                <div class="custom-content-bar" style="width: @(step * (100 / 3))%"></div>
            </div>
            <div class="step-header">
                <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
                <MudText Typo="Typo.h6" Style="color:#8B8C89; margin-right: 1px;">Registrar Persona</MudText>
            </div>
            <div>
                <button class="back-to-login-btn" @onclick="NavigateToLogin">
                    <svg xmlns="http://www.w3.org/2000/svg" height="32" viewBox="0 0 36 32" width="36">
                        <path d="M0 0h24v24H0z" fill="none" />
                        <path d="M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21z" fill="#BDBBBB" transform="scale(1.4, 1.4)" />
                    </svg>
                    Login
                </button>
            </div>

            @if (step == 1)
            {
                <label class="custom-label">Nombre</label>
                <MudTextField @ref="nameField" @bind-Value="@reqUserDto.Name" Required="true" Variant="Variant.Outlined" Style="color:white;"
                              OnKeyDown="@((e) => HandleKeyDown(e, lastNameField))" />
                <label class="custom-label mt-5">Apellido</label>
                <MudTextField @ref="lastNameField" @bind-Value="@reqUserDto.LastName" Required="true" Variant="Variant.Outlined" Style="color:white;" />
                <div class="d-flex justify-content-between mt-5">
                    <label class="custom-label">Nombre de Usuario</label>
                    <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                        </ChildContent>
                        <TooltipContent>
                            <MudText Style="font-weight:bold; font-size:small">No debe iniciar con un número.</MudText>
                            <MudText Style="font-weight:bold; font-size:small">No debe tener espacios.</MudText>
                        </TooltipContent>
                    </MudTooltip>
                </div>
                <MudTextField @ref="userNameField" @bind-Value="@reqUserDto.UserName" Required="true" Variant="Variant.Outlined" Style="color:white;" />
                <p class="custom-message-required">El campo es requerido.</p>
            }
            @if (step == 2)
            {
                <label class="custom-label">Teléfono</label>
                <MudTextField @ref="phoneField" @bind-Value="@reqUserDto.Phone" Required="true" Variant="Variant.Outlined" Style="color:white;"
                              OnKeyDown="@((e) => HandleKeyDown(e, passwordField))" />
                <div class="d-flex justify-content-between mt-5">
                    <label class="custom-label">Contraseña</label>
                    <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                        </ChildContent>
                        <TooltipContent>
                            <MudText Style="font-weight:normal; font-size:small;">La <strong>contraseña</strong> debe contener al menos:</MudText>
                            <MudText Style="font-weight:normal; font-size:small;">
                                1 letra, 8 caracteres, 1 número y
                            </MudText>
                            <MudText Style="font-weight:normal; font-size:small;">
                                1 carácter
                                especial (“@@”,”!”,”#”,”.”)
                            </MudText>
                        </TooltipContent>
                    </MudTooltip>
                </div>
                <MudTextField @ref="passwordField" @bind-Value="@reqUserDto.Password" Required="true" InputType="InputType.Password" Variant="Variant.Outlined" Style="color:white;" />
                <div class="d-flex justify-content-between mt-5">
                    <label class="custom-label">Confirmar Contraseña</label>
                    <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                        </ChildContent>
                        <TooltipContent>
                            <MudText Style="font-weight:bold; font-size:small">Las contraseñas deben coincidir.</MudText>
                        </TooltipContent>
                    </MudTooltip>
                </div>
                <MudTextField @ref="confirmPasswordField" @bind-Value="@reqUserDto.ConfirmPassword" Required="true" InputType="InputType.Password" Variant="Variant.Outlined" Style="color:white;" />
            }
            @if (step == 3)
            {
                <div class="custom-image-title">Foto de Perfil</div>
                <MudTextField @bind-Value="@reqUserDto.ProfileImage" InputType="InputType.Hidden" />

                <MudFileUpload T="IBrowserFile" @bind-Value="@reqUserDto.ProfileImage" AcceptedFileTypes="image/*" MaxFileSize="2097152" />
                @if (reqUserDto.ProfileImage != null)
                {
                    <MudText Typo="Typo.body2">Vista previa:</MudText>
                    <img src="@GetImagePreview(reqUserDto.ProfileImage)" alt="Imagen de perfil" width="100" height="100" class="image-preview" />
                }
                <p class="custom-message-image">Puedes dar clic en el círculo para seleccionar una imagen o dejar el avatar por defecto.</p>
            }
            <div class="buttons-container">
                @if (step < 3)
                {
                    <MudButton OnClick="NextStep" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Siguiente</MudButton>
                }
                else
                {
                    <MudButton Type="Submit" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Registrar</MudButton>
                }
                @if (step > 1)
                {
                    <MudButton OnClick="PreviousStep" Variant="Variant.Outlined" Style="background-color:transparent; width: 180px; border: 3px solid #767572; color: #D1D5DB; border-radius: 0.5rem;font-weight: bold;">Paso anterior</MudButton>
                }
            </div>

        </MudForm>
    </div>
    <div class="aside-background"></div>

</div>


@code {
    private int step = 1;
    private MudForm form;
    private ReqUserDto reqUserDto = new();

    private MudTextField<string> nameField;
    private MudTextField<string> lastNameField;
    private MudTextField<string> userNameField;
    private MudTextField<string> phoneField;
    private MudTextField<string> passwordField;
    private MudTextField<string> confirmPasswordField;

    #region Step Methods
    private void NextStep()
    {
        if (step < 3)
            step++;
    }

    private void PreviousStep()
    {
        if (step > 1)
            step--;
    }
    #endregion

    #region OnFocus Methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.Name) && nameField != null)
        {
            await nameField.FocusAsync();
        }
        else if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.LastName) && lastNameField != null)
        {
            await lastNameField.FocusAsync();
        }
        else if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.UserName) && userNameField != null)
        {
            await userNameField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.Phone) && phoneField != null)
        {
            await phoneField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.Password) && passwordField != null)
        {
            await passwordField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.ConfirmPassword) && confirmPasswordField != null)
        {
            await confirmPasswordField.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, MudTextField<string> nextField)
    {
        if (e.Key == "Tab")
        {
            await nextField.FocusAsync();
        }
    }
    #endregion

    #region Navigate Methods
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    #endregion

    #region Handle Form Methods
    private void HandleValidSubmit()
    {
        Console.WriteLine("Formulario enviado exitosamente.");
    }

    private string GetImagePreview(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        file.OpenReadStream().ReadAsync(buffer);
        return $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }
    #endregion
}

