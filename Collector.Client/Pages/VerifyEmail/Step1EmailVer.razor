@using Collector.Client.Dtos.Login
@using System.Text.RegularExpressions
@inherits ComponentBase;

<div class="step1-container">
    <MudForm Model="reqUserDto">
        @if (_IsInstitution == true)
        {
            <div class="d-flex justify-content-between">
                <label class="custom-label">RNC</label>
                <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                    <ChildContent>
                        <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                    </ChildContent>
                    <TooltipContent>
                        <MudText Style="font-weight:bold; font-size:small">Formato recomendado:</MudText>
                        <MudText Style="font-weight:bold; font-size:small">000-00000-0</MudText>
                    </TooltipContent>
                </MudTooltip>
            </div>
            <MudTextField @bind-Value="reqUserDto.Identification"
                          Required="true"
                          AutoFocus="true"
                          Variant="Variant.Outlined"
                          Style="color:white;"
                           />
            @if (!string.IsNullOrEmpty(ValidationMessage))
            {
                <MudText Style="color:red; font-size:small;">@ValidationMessage</MudText>
            }
        }
        else
        {
            <div class="d-flex justify-content-between">
                <label class="custom-label">Cédula</label>
                <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                    <ChildContent>
                        <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                    </ChildContent>
                    <TooltipContent>
                        <MudText Style="font-weight:bold; font-size:small">Formato recomendado:</MudText>
                        <MudText Style="font-weight:bold; font-size:small">000-0000000-0</MudText>
                    </TooltipContent>
                </MudTooltip>
            </div>
            <MudTextField @bind-Value="reqUserDto.Identification"
                          Required="true"
                          AutoFocus="true"
                          Variant="Variant.Outlined"
                          Style="color:white;"
                           />
            @if (!string.IsNullOrEmpty(ValidationMessage))
            {
                <MudText Style="color:red; font-size:small;">@ValidationMessage</MudText>
            }
        }

        <div class="d-flex justify-content-between mt-5">
            <label class="custom-label">Correo Electrónico</label>
            <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                <ChildContent>
                    <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                </ChildContent>
                <TooltipContent>
                    <MudText Style="font-weight:bold; font-size:small">Formato recomendado:</MudText>
                    <MudText Style="font-weight:bold; font-size:small">example@gmail.com</MudText>
                </TooltipContent>
            </MudTooltip>
        </div>
        <MudTextField @bind-Value="reqUserDto.Email" Required="true" InputType="InputType.Email" Variant="Variant.Outlined" Style="color:white;" />
    </MudForm>
</div>

<style>
    .custom-label {
        font-weight: 700;
        color: #BDBABA;
    }

        .custom-label::before {
            content: '*';
            color: #ef4444;
            margin-right: 0.25rem;
        }

</style>


@code {

    [Parameter]
    public ReqUserDto reqUserDto { get; set; } = new ReqUserDto();
    [Parameter]
    public bool _IsInstitution { get; set; }

    private string ValidationMessage { get; set; } = string.Empty;

    private void ValidateIdentification()
    {
        string identification = Regex.Replace(reqUserDto.Identification ?? string.Empty, @"-", "");

        if (_IsInstitution)
        {
            if (!Regex.IsMatch(identification, @"^\d{9}$"))
            {
                ValidationMessage = "El RNC debe tener exactamente 9 dígitos. Ejemplo: 000-00000-0.";
            }
            else
            {
                ValidationMessage = string.Empty;
            }
        }
        else
        {
            if (!Regex.IsMatch(identification, @"^\d{11}$"))
            {
                ValidationMessage = "La cédula debe tener exactamente 11 dígitos. Ejemplo: 000-0000000-0.";
            }
            else
            {
                ValidationMessage = string.Empty;
            }
        }
    }
    private void FormatIdentification(ChangeEventArgs e)
    {
        string rawInput = Regex.Replace(e.Value?.ToString() ?? string.Empty, @"\D", "");

        if (_IsInstitution)
        {
            reqUserDto.Identification = rawInput.Length switch
            {
                <= 3 => rawInput,
                <= 8 => $"{rawInput[..3]}-{rawInput[3..]}",
                _ => $"{rawInput[..3]}-{rawInput[3..8]}-{rawInput[8..]}"
            };
        }
        else
        {
            reqUserDto.Identification = rawInput.Length switch
            {
                <= 3 => rawInput,
                <= 10 => $"{rawInput[..3]}-{rawInput[3..]}",
                _ => $"{rawInput[..3]}-{rawInput[3..10]}-{rawInput[10..]}"
            };
        }
    }
}
