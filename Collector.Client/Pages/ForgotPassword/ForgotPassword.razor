@page "/ForgotPassword"
@using Collector.Client.Dtos.ForgotPassword
@using Collector.Client.Dtos
@using Collector.Client.Helpers
@using Collector.Client.Pages.Register
@using Collector.Client.Services.Password
@using Collector.Client.Services.Register
@using Collector.Client.Validations
@using Microsoft.AspNetCore.Components.Forms
@using Collector.Client.Components.Shared
@using Microsoft.JSInterop
@using MudBlazor
@using FluentValidation
@inject NavigationManager Navigation
@inject IRegisterService _registerService;
@inject IPasswordService passwordService
@inject IJSRuntime JS

<div class="main-container">
    <div class="form-container">
        <MudForm @ref="form" Model="forgotPasswordModel">

            <ProgressBar Value="Value" />

            <div class="step-header">
                <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
                <MudText Style="font-size:large; font-weight:bold; color:#8B8C89; margin-right: 1px;">Recuperar Contraseña</MudText>
            </div>

            <div>
                <BackToLoginBtn ButtonText="Login" OnClick="NavigateToLogin" />
            </div>
            @switch (step)
            {
                case 1:
                    <p class="custom-message-info">Ingrese su correo electrónico, para recuperar su contraseña.</p>
                    <label class="custom-label">Correo Electrónico</label>
                    <MudTextField @bind-Value="@forgotPasswordModel.Email" Variant="Variant.Outlined" Style="color:white;" />

                    break;
                case 2:
                    <label class="custom-label">Código de Verificación</label>
                    <MudTextField @bind-Value="@forgotPasswordModel.Code" Placeholder="Ingresa tu código"
                                  For="@(() => forgotPasswordModel.Code)" Variant="Variant.Outlined" Style="color:white;" />
                    break;
                case 3:
                    <div class="d-flex justify-content-between mt-5">
                        <label class="custom-label">Contraseña</label>
                        <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                            <ChildContent>
                                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                            </ChildContent>
                            <TooltipContent>
                                <MudText Style="font-weight:normal; font-size:small;">La <strong>contraseña</strong> debe contener al menos:</MudText>
                                <MudText Style="font-weight:normal; font-size:small;">
                                    1 letra, 8 caracteres, 1 número y
                                </MudText>
                                <MudText Style="font-weight:normal; font-size:small;">
                                    1 carácter
                                    especial (“@@”,”!”,”#”,”.”)
                                </MudText>
                            </TooltipContent>
                        </MudTooltip>
                    </div>
                    <MudTextField @bind-Value="@forgotPasswordModel.NewPassword"
                                  InputType="@PasswordInput"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Style="color:white;" />

                    <div class="d-flex justify-content-between mt-5">
                        <label class="custom-label">Nueva Contraseña</label>
                        <MudTooltip Style="background-color:darkgray; color:black;" Arrow="true" Placement="Placement.Right" Delay="400">
                            <ChildContent>
                                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Size="Size.Small" Style="color:darkgray" />
                            </ChildContent>
                            <TooltipContent>
                                <MudText Style="font-weight:bold; font-size:small">Las contraseñas deben coincidir.</MudText>
                            </TooltipContent>
                        </MudTooltip>
                    </div>
                    <MudTextField @bind-Value="@forgotPasswordModel.ConfirmPassword" InputType="InputType.Password" Variant="Variant.Outlined" Style="color:white;" />
                    break;
            }

            <div class="buttons-container">
                @if (step < 3)
                {
                    <MudButton OnClick="NextStep" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Siguiente</MudButton>
                }
                else
                {
                    <MudButton OnClick="NextStep" Variant="Variant.Filled" Style="color:white; background-color:#7B885B; width:250px;">Actualizar</MudButton>
                }
                @if (step > 1)
                {
                    <MudButton OnClick="PreviousStep" Variant="Variant.Outlined" Style="background-color:transparent; width: 180px; border: 3px solid #767572; color: #D1D5DB; border-radius: 0.5rem;font-weight: bold;">Paso anterior</MudButton>
                }
            </div>

        </MudForm>
    </div>
    <div class="aside-background"></div>
</div>



@code {
    private int step = 1;
    private MudForm form;
    public double Value { get; set; }
    private ForgotPasswordModel forgotPasswordModel = new();
    private readonly ForgotPasswordValidator validator = new();
    private bool isPasswordVisible = false;


    #region Password Visibility
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        bool isPasswordVisible = PasswordInput == InputType.Password;
        PasswordInput = isPasswordVisible ? InputType.Text : InputType.Password;
        PasswordInputIcon = isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
    #endregion

    #region AdvanceMethod
    public void AdvanceProgress() => Value += 33.3;

    public void GoBackProgress() => Value -= 33.3;
    #endregion

    protected override Task OnInitializedAsync()
    {
        AdvanceProgress();
        return base.OnInitializedAsync();
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("Formulario enviado exitosamente.");
    }

    private async Task NextStep()
    {

        var validationResult = validator.Validate(forgotPasswordModel, options => options.IncludeRuleSets($"Step{step}"));

        switch (step)
        {
            case 1:

                if (!validationResult.IsValid)
                {
                    var ErrorMessage = string.Join("\n", validationResult.Errors.Select(e => e.ErrorMessage));
                    await ShowAlert("Error al verificar correo", ErrorMessage, "error");
                    return;
                    
                    forgotPasswordModel.IsError = false;
                    forgotPasswordModel.ErrorMessage = string.Empty;
                }

                var EmailExist = await _registerService.GetUserByEmail(forgotPasswordModel.Email);
                if (EmailExist == null)
                {
                    await ShowAlert("Error al verificar correo", "Este correo no esta registrado", "error");
                    return;
                }

                forgotPasswordModel = await passwordService.ForgotPasswordAsync(forgotPasswordModel);
                if (!forgotPasswordModel.IsError)
                {
                    await ShowAlert("Correo de recuperación enviado", "Se le ha enviado un correo con un código, tiene 15 minutos para validarlo");
                    step++;
                    AdvanceProgress();
                }

                break;

            case 2:
                forgotPasswordModel = await passwordService.VerifyCodeAsync(forgotPasswordModel);
                if (!validationResult.IsValid)
                {
                    var ErrorMessage = string.Join("\n", validationResult.Errors.Select(e => e.ErrorMessage));
                    await ShowAlert("Error al verificar el código", ErrorMessage, "error");
                    forgotPasswordModel.IsError = false;
                    forgotPasswordModel.ErrorMessage = string.Empty;
                }
                else
                {
                    await ShowAlert("Código verificado correctamente.", "A continuación establecerá su nueva contraseña.");
                    step++;
                    AdvanceProgress();
                }
                break;

            case 3:
                await passwordService.ResetPasswordAsyncS(forgotPasswordModel.Email, forgotPasswordModel.NewPassword);
                if (!validationResult.IsValid)
                {
                    var ErrorMessage = string.Join("\n", validationResult.Errors.Select(e => e.ErrorMessage));
                    await ShowAlert("Error al verificar el código", ErrorMessage, "error");
                    forgotPasswordModel.IsError = false;
                    forgotPasswordModel.ErrorMessage = string.Empty;

                }
                else
                {
                    await ShowAlert("Contraseña actualizada satisfactoriamente.", "Intente iniciar sesión nuevamente.");
                    NavigateToLogin();
                }
                break;
        }
    }

    private void PreviousStep()
    {
        if (step > 1)
        {
            step--;
            GoBackProgress();
        }
    }

    #region Navigate Methods
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }
    #endregion

    #region Alert
    private async Task ShowAlert(string title, string message, string? icon = "success")
    {
        await JS.InvokeVoidAsync("showSweetAlert", title, message, icon);
    }
    #endregion
}

<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function showSweetAlert(title, message, icon) {
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
            }
        });
        Toast.fire({
            icon: icon,
            title: message
        });
    };
</script>