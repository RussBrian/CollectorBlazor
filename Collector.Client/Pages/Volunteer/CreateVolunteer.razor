@page "/Volunteer/Create/{VolunteerId:int?}"
@using Collector.Client.Components.Shared
@using Collector.Client.Dtos
@using Collector.Client.Dtos.Volunteer
@using Collector.Client.Helpers
@using Collector.Client.Services.Volunteer
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Globalization
@using Blazored.FluentValidation;
@inject IVolunteerService _volunteerService
@inject NavigationManager Navigation;
@inject IJSRuntime JS;

@{
    <script src="https://kit.fontawesome.com/7302c44b99.js" crossorigin="anonymous"></script>
}
<RoleBasedAccess Roles="Institution">
    @if (_isLoading)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="primary-container">
            <main class="secondary-container">
                <EditForm Model="@ResVolunteerDto" class="edit-form-style" OnValidSubmit="OnSubmit">
                    <h3 class="title">@Title</h3>
                    <div class="card-body-container">

                        <FluentValidationValidator />

                        <div class="text-field-container">
                            <div class="text-field-style">
                                <div class="d-flex justify-content-between">
                                    <label class="custom-label">Título del voluntariado</label>
                                    <ToolTipCustom ToolTipTextStyle="font-weight:bold; font-size:small;" ToolTipDescription="Ayudame" ToolTipStyle="color:#37490B;" />
                                </div>
                                <MudTextField @bind-Value="ResVolunteerDto.Name" Variant="Variant.Outlined" />
                                <p class="text-secondary">Coloque un título que identifique su voluntariado.</p>
                                <ValidationMessage style="validation-message: 0 ;" For="(() => ResVolunteerDto.Name)" />

                            </div>

                            <div class="text-field-style" style="width: 30%; position: relative;">
                                <button onclick="@NavigateBack" style="position: absolute; top: 0; right: 0; background: none; border: none;">
                                    <i class="fa-solid fa-xmark fa-xl" style="color: black;"></i>
                                </button>

                                <label class="custom-label">Fecha</label>
                                <MudTextField InputType="InputType.Date" @bind-Value="ResVolunteerDto.VolunteerDate" Variant="Variant.Outlined" />
                                <ValidationMessage style="validation-message: 0 ;" For="(() => ResVolunteerDto.VolunteerDate)" />
                            </div>
                        </div>

                        <div class="description-container">
                            <label class="custom-label">Descripción</label>
                            <MudTextField @bind-Value="ResVolunteerDto.Details" Variant="Variant.Outlined" Lines="5" Style="custom-textfield:0;" />
                            <p class="text-secondary">Coloque una descripción que permita detallar el voluntariado y/o puede indicar otros detalles. (Opcional)</p>
                            <ValidationMessage style="validation-message: 0 ;" For="(() => ResVolunteerDto.Details)" />
                        </div>

                        <div class="map-container">
                            <div>
                                <MudStack Row="true">
                                    <MudItem Class="m-0">
                                        <label class="custom-label">Ubicación</label>
                                    </MudItem>
                                    <MudItem>
                                        <ToolTipCustom ToolTipTextStyle="font-weight:bold; font-size:small; width:250px"
                                                       ToolTipDescription="Debe colocar la ubicación exacta o un aproximado,
                                                                   de la zona donde se realizará el voluntariado
                                                                   detalles para identificar mejor la zona afectada."
                                                       ToolTipStyle="color:#37490B" />
                                    </MudItem>
                                </MudStack>
                                <CustomMap Width="275px"
                                           Height="250px"
                                           OnLocationSelected="HandleLocationSelected" />
                            </div>

                            <div>
                                <MudStack Row="true">
                                    <MudItem Class="m-0">
                                        <label class="custom-label">Imágenes</label>
                                    </MudItem>
                                    <MudItem>
                                        <ToolTipCustom ToolTipTextStyle="font-weight:bold; font-size:small; width:250px"
                                                       ToolTipDescription="Coloque una imagen de la zona afectada.
                                               Puede colocar hasta cuatro imágenes si asi lo desea."
                                                       ToolTipStyle="color:#37490B" />
                                    </MudItem>
                                </MudStack>
                                <img class="rounded-3" src="@(FrontImage != "" ? FrontImage : "./BosqueLindo.png")" width="275px" height="250px" />
                                <p class="text-secondary mx-8 mt-2">Solo son admitidas 4 imagenes</p>

                                <div class="d-flex">
                                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
                                        <ActivatorContent>
                                            <MudButtonComponent Text="Añadir imagen"
                                                                Variant="Variant.Outlined"
                                                                Style="background-color:transparent;
                                                            width: 155px; border: 3px solid #767572; color: #767572;
                                                            border-radius: 0.5rem;font-weight: bold; margin-left:60px" />
                                        </ActivatorContent>
                                    </MudFileUpload>
                                </div>
                            </div>
                        </div>

                        <div class="text-field-container">
                            <div class="text-field-style">
                                <div class="d-flex justify-content-between">
                                    <label class="custom-label">Tipo de voluntariado</label>
                                    <ToolTipCustom ToolTipTextStyle="font-weight:bold; font-size:small;" ToolTipDescription="Ayudame" ToolTipStyle="color:#37490B;" />
                                </div>
                                <MudSwitch @bind-Value="ResVolunteerDto.IsPrivate" Color="Color.Primary" UncheckedColor="Color.Secondary">Privado</MudSwitch>
                            </div>
                            @if (ResVolunteerDto.IsPrivate)
                            {
                                <div class="text-field-style" style="width: 30%;">
                                    <label class="custom-label">Código</label>
                                    <MudTextField @bind-Value="ResVolunteerDto.VolunteerCode" Variant="Variant.Outlined" />
                                </div>
                            }
                        </div>

                        <div class="m-4 d-flex justify-content-center">
                            <MudTooltip Style="background-color:darkgray; color:black;"
                                        Arrow="true" Placement="Placement.Right" Delay="400">
                                <ChildContent>
                                    <MudIcon Style="color:#37490B; margin-right:2px;" Icon="@Icons.Material.Filled.ErrorOutline"
                                             Size="Size.Small" />
                                </ChildContent>
                            </MudTooltip>
                            <p class="text-secondary text-center">Dar click sobre el icono para ver más detalles del campo a completar.</p>
                        </div>
                    </div>

                    <div class="button-send-container">
                        <MudButton Variant="Variant.Filled"
                                   ButtonType="ButtonType.Submit"
                                   Style="background-color:#515B3B; margin-bottom:10px; color:white; width:400px;">
                            @ButtonSend
                        </MudButton>
                    </div>
                </EditForm>
            </main>
        </div>
    }
</RoleBasedAccess>

<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function showSweetAlert(Message, icon) {
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
            }
        });
        Toast.fire({
            icon: icon,
            title: Message
        });
    };
</script>

<style>
    .custom-textfield {
        border: 2px solid #767572;
        border-radius: 0.5rem;
        padding: 8px;
        font-size: 14px;
        color: #37490B;
        background-color: #f9f9f9;
        width: 100%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .custom-textfield:focus {
            outline: none;
            border-color: #515B3B;
            box-shadow: 0 0 5px #515B3B;
        }

    .edit-form-style {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: auto;
    }
</style>

@code {
    [Parameter] public int VolunteerId { get; set; }
    public ResVolunteerDto ResVolunteerDto { get; set; } = new();
    public string FrontImage { get; set; } = string.Empty;
    public bool HasFrontImage { get; set; } = false;
    public bool _isEditMode { get; set; } = false;
    public string ButtonSend => !_isEditMode ? "Crear voluntariado" : "Editar voluntariado";
    public string Title => !_isEditMode ? "Crea un voluntariado" : "Editar un voluntariado";
    private bool _isLoading = true;


    #region OnInitialize
    protected async override Task OnInitializedAsync()
    {
        _isLoading = true;
        if (VolunteerId != 0)
        {
            ResVolunteerDto = await _volunteerService.GetVolunteerById(VolunteerId);
            var date = ResVolunteerDto.VolunteerDate;
            if (DateTime.TryParse(date, out DateTime formatedDate))
            {
                ResVolunteerDto.VolunteerDate = formatedDate.ToString("yyyy-MM-dd");
            }

            _isEditMode = true;
        }
        else
        {
            ResVolunteerDto ??= new();
        }
        _isLoading = false;
    }

    #endregion

    #region SetMapPorperites
    private void HandleLocationSelected((double Latitude, double Longitude) location)
    {
        ResVolunteerDto.Longitude = (float)location.Longitude;
        ResVolunteerDto.Latitude = (float)location.Latitude;
        Console.WriteLine($"Ubicación seleccionada: Longitud={location.Longitude}, Latitud={location.Latitude}");
    }
    #endregion

    #region File Manager
    private List<IBrowserFile> _selectedFiles = new();
    private List<IBrowserFile> _processedFiles = new();

    public async Task UploadFiles(IReadOnlyList<IBrowserFile> newFiles)
    {
        var filesToProcess = newFiles.Except(_processedFiles).ToList();
        int reportCount = ResVolunteerDto.Images.Count();
        if (filesToProcess.Any())
        {

            if (reportCount == 4 || newFiles.Count() > 4 || reportCount + filesToProcess.Count() > 4)
            {
                await JS.InvokeVoidAsync("showSweetAlert", "Solo se permiten 4 imágenes", "error");
                return;
            }

            _selectedFiles.AddRange(filesToProcess);
            _processedFiles.AddRange(filesToProcess);

            var formFiles = await ImageConverter.ConvertBrowserFilesToFormFilesAsync(_selectedFiles);
            foreach (var image in formFiles)
            {
                ResVolunteerDto.Images.Add(image);
            }
            _selectedFiles.Clear();

            if (!HasFrontImage)
            {
                FrontImage = await ImageConverter.ConvertSingleImageToStringAsync(newFiles[0]);
                HasFrontImage = true;
                StateHasChanged();
            }
        }
    }
    #endregion

    #region OnSubmit method
    private async Task OnSubmit()
    {
        if (_isEditMode)
        {
            ResVolunteerDto? data = await _volunteerService.UpdateVolunteer(ResVolunteerDto);
            Navigation.NavigateTo($"/Volunteers");
        }
        else
        {
            if (ResVolunteerDto.Images.Count() == 0)
            {
                await JS.InvokeVoidAsync("showSweetAlert", "El voluntariado debe de contener al menos una imagen.", "error");
                return;
            }
            (bool success, string message) = await _volunteerService.CreateVolunteer(ResVolunteerDto);
            if (!success)
            {
                await JS.InvokeVoidAsync("showSweetAlert", message, "error");
                return;
            }
            Navigation.NavigateTo($"/Volunteers");
            await JS.InvokeVoidAsync("showSweetAlert", "Voluntariado creado existosamente!", "success");
        }
    }
    #endregion

    private void NavigateBack()
    {
        Navigation.NavigateTo("/Volunteers", forceLoad: true);
    }
}