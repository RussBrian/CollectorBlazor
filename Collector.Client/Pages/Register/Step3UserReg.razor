@using Collector.Client.Dtos.Login
@using Collector.Client.Helpers
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS;

<div class="step3-container">
    <MudForm Model="reqUserDto">

        <div class="custom-image-title">Foto de Perfil</div>

        <div class="img-container">
            <button type="button" class="rounded-button" @onclick="TriggerFileInput">
                <img class="rounded-button-img" src="@(string.IsNullOrEmpty(ImagePreview) ? "./BosqueLindo.png" : ImagePreview)" alt="Select an Image" />
            </button>

            <InputFile id="fileInput" hidden OnChange="OnFileSelected" accept="image/*" />
        </div>

        <p class="custom-message-image">
            Seleccione una imagen haciendo click en la imagen.
        </p>
    </MudForm>
</div>

<style>

    .img-container {
        margin-top: 20px;
        display: flex;
        align-content: center;
        justify-content: center;
    }

    .rounded-button {
        border: none;
        background-color: transparent;
        cursor: pointer;
    }

    .rounded-button-img {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ccc;
    }

    .input-file-rounded {
        border-radius: 50%;
        overflow: hidden;
    }

    .custom-message-image {
        margin-top: 8px;
        margin-bottom: 5px;
        color: white;
        align-content: center;
    }

    .custom-image-title {
        color: white;
        font-weight: bold;
        margin-bottom: 5px;
    }
</style>

@code {
    [Parameter]
    public ReqUserDto reqUserDto { get; set; }
    private ElementReference fileInput;
    private string ImagePreview { get; set; } = string.Empty;

    #region Handle Image Methods
    private async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("eval", "document.getElementById('fileInput').click()");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using var stream = file.OpenReadStream(4 * 1024 * 1024);
            await stream.ReadAsync(buffer);
            string base64String = Convert.ToBase64String(buffer);
            ImagePreview = $"data:{file.ContentType};base64,{base64String}";
            reqUserDto.File = await ImageConverter.ConvertToIFormFile(file);
        }
    }
    #endregion
}

