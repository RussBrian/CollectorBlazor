@using Collector.Client.Dtos.Login
@using Collector.Client.Helpers
@using Microsoft.AspNetCore.Components.Forms

<div class="step3-container">
    <MudForm Model="reqUserDto">

        <div class="custom-image-title">Foto de Perfil</div>

        <div class="img-container">
            <img class="rounded-3" src="@(string.IsNullOrEmpty(ImagePreview) ? "./BosqueLindo.png" : ImagePreview)" width="275px" height="250px" />

            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                <ActivatorContent>
                    <MudButton Variant="Variant.Outlined"
                               Style="background-color:#7B885B;
                            width: 155px; border: 3px solid #767572; color: white;
                            border-radius: 0.5rem;font-weight: bold; margin-top:15px; margin-left:60px">Añadir imagen</MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </div>

        <p class="custom-message-image">
            Puedes arrastrar tu imagen al área o seleccionarla haciendo clic.
        </p>
    </MudForm>
</div>

<style>
    .input-file-rounded {
        border-radius: 50%;
        overflow: hidden;
    }

    .custom-image-title{
        color:white;
        font-weight:bold;
        margin-bottom:5px;
    }
</style>

@code {
    [Parameter]
    public ReqUserDto reqUserDto { get; set; }

    private string ImagePreview { get; set; } = string.Empty;
    private IList<IBrowserFile> File = [];

    #region Handle Image Methods
    private async Task UploadFiles(IBrowserFile image)
    {
        if (image.Size > 1024 * 1024 * 5)
        {
            Console.WriteLine("El archivo excede el tamaño máximo permitido (5 MB).");
            return;
        }        
        reqUserDto.Image = await ConverImageToString(image);
        ImagePreview = reqUserDto.Image;
        StateHasChanged();

    }

    #endregion

    #region Image Converter
    private async Task<string> ConverImageToString(IBrowserFile file)
    {
        if (file == null)
            throw new ArgumentNullException(nameof(file));

        using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5); // Límite de 5 MB
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }
    #endregion
}

