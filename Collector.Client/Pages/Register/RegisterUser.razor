@page "/RegisterUser/{_IsInstitution:bool}"
@using Collector.Client.Dtos.Login
@using Collector.Client.Components.Shared
@inject NavigationManager Navigation

<div class="main-container">
    <div class="form-container">
        
        
        <ProgressBar Value="Value" />

        <div class="step-header">
            <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
            <MudText Typo="Typo.h6" Style="color:#8B8C89; margin-right: 1px;">Registrar Persona</MudText>
        </div>

        <div>
            <BackToLoginBtn ButtonText="Login" OnClick="NavigateToLogin"/>
        </div>

        @switch (step)
        {
            case 1:
                <Step1UserReg reqUserDto="reqUserDto"
                              IsInstitution="_IsInstitution" />
                break;
            case 2:
                <Step2UserReg reqUserDto="reqUserDto"
                              IsInstitution="_IsInstitution" />
                break;
            case 3:
                <Step3UserReg reqUserDto="reqUserDto"
                              IsInstitution="_IsInstitution" />
                break;
            default:
                <Step1UserReg reqUserDto="reqUserDto"
                              IsInstitution="_IsInstitution" />
                break;
        }

        <div class="buttons-container">
            @if (step < 3)
            {
                    <MudButtonComponent Text="Siguiente" OnClick="NextStep"
                                        Color="Color.Primary" Variant="Variant.Filled"
                                        Style="width:230px;" />
            }
            else
            {

                <MudButtonComponent Text="Registrar"
                                    Color="Color.Primary" Variant="Variant.Filled"
                                    Style="width:230px;" />
            }
            @if (step > 1)
            {
                <MudButtonComponent Text="Paso anterior" OnClick="PreviousStep"
                                    Variant="Variant.Outlined" Style="background-color:transparent; 
                                    width: 155px; border: 3px solid #767572; color: #D1D5DB; 
                                    border-radius: 0.5rem;font-weight: bold;" />
            }
        </div>
    </div>
    <div class="aside-background"></div>
</div>


@code {

    [Parameter]
    public bool _IsInstitution { get; set; }
    public Step1UserReg? _step1UserReg;
    private int step = 1;
    public double Value { get; set; }
    private ReqUserDto reqUserDto = new();
    private MudTextField<string> nameField;
    private MudTextField<string> lastNameField;
    private MudTextField<string> userNameField;
    private MudTextField<string> phoneField;
    private MudTextField<string> passwordField;
    private MudTextField<string> confirmPasswordField;

    public void AdvanceProgress()
    {
        Value += 33.3;
        StateHasChanged();
    }

    public void GoBackProgress()
    {
        Value -= 33.3;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AdvanceProgress();
        }
        base.OnAfterRender(firstRender);
    }

    #region Step Methods
    private void NextStep()
    {
        if (step < 3)
            step++;
        AdvanceProgress();
    }

    private void PreviousStep()
    {
        if (step > 1)
            step--;
        GoBackProgress();
    }
    #endregion

    #region OnFocus Methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.Name) && nameField != null)
        {
            await nameField.FocusAsync();
        }
        else if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.LastName) && lastNameField != null)
        {
            await lastNameField.FocusAsync();
        }
        else if (step == 1 && string.IsNullOrWhiteSpace(reqUserDto.UserName) && userNameField != null)
        {
            await userNameField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.Phone) && phoneField != null)
        {
            await phoneField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.Password) && passwordField != null)
        {
            await passwordField.FocusAsync();
        }
        else if (step == 2 && string.IsNullOrWhiteSpace(reqUserDto.ConfirmPassword) && confirmPasswordField != null)
        {
            await confirmPasswordField.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, MudTextField<string> nextField)
    {
        if (e.Key == "Tab")
        {
            await nextField.FocusAsync();
        }
    }
    #endregion

    #region Navigate Methods
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    #endregion
}