@page "/RegisterUser/{identification}/{email}/{code}/{_IsInstitution:bool}"
@using Collector.Client.Components.Shared
@using Collector.Client.Dtos.Login
@using Collector.Client.Dtos.User
@using Collector.Client.Helpers
@using Collector.Client.Services.Register
@using Collector.Client.Validations
@using System.Text
@using FluentValidation
@inject IRegisterService _registerService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="main-container">
    <div class="form-container">
        <ProgressBar Value="Value" />

        <div class="step-header">
            @if (!_IsInstitution)
            {
                <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
                <MudText Typo="Typo.h6" Style="color:#8B8C89;">Registrar Persona</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:6px">Paso @(step)-3</MudText>
                <MudText Typo="Typo.h6" Style="color:#8B8C89; ">Registrar Institución</MudText>
            }
        </div>

        <div>
            <BackToLoginBtn ButtonText="Login" OnClick="NavigateToLogin" />
        </div>

        @switch (step)
        {
            case 1:
                <Step1UserReg reqUserDto="reqUserDto" _IsInstitution="_IsInstitution" />
                break;
            case 2:
                <Step2UserReg reqUserDto="reqUserDto"/>
                break;
            case 3:
                <Step3UserReg reqUserDto="reqUserDto"/>
                break;
            default:
                <Step1UserReg reqUserDto="reqUserDto"/>
                break;
        }

        <div class="buttons-container">
            @if (step < 3)
            {
                <MudButtonComponent Text="Siguiente" OnClick="NextStep"
                Color="Color.Primary" Variant="Variant.Filled"
                Style="width:230px;" />
            }
            else
            {
                <MudButtonComponent Text="Registrar"
                OnClick="RegisterUserAsync"
                Color="Color.Primary" Variant="Variant.Filled"
                Style="width:230px;" />
            }

            @if (step > 1)
            {
                <MudButtonComponent Text="Paso anterior" OnClick="PreviousStep"
                Variant="Variant.Outlined" Style="background-color:transparent;
                                    width: 155px; border: 3px solid #767572; color: #D1D5DB;
                                    border-radius: 0.5rem;font-weight: bold;" />
            }
        </div>
    </div>
    <div class="aside-background"></div>
</div>

@code {
    private int step = 1;
    public double Value { get; set; }
    private readonly ReqUserDtoValidator validator = new();
    private ReqUserDto reqUserDto = new();

    [Parameter]
    public string identification { get; set; } = string.Empty;
    [Parameter]
    public string email { get; set; } = string.Empty;
    [Parameter]
    public string code { get; set; } = string.Empty;
    [Parameter]
    public bool _IsInstitution { get; set; }

    #region Register Method
    private async Task RegisterUserAsync()
    {
        try
        {
            var decodeIdentify = Convert.FromBase64String(identification);
            var decodeEmail = Convert.FromBase64String(email);
            var decodeCode = Convert.FromBase64String(code);

            string resultEmail = Encoding.UTF8.GetString(decodeEmail);

            UserEmailDto confirmEmail = new()
                {
                    Email = resultEmail,
                    Code = int.Parse(Encoding.UTF8.GetString(decodeCode))
                };

            reqUserDto.Email = resultEmail;
            reqUserDto.Identification = Encoding.UTF8.GetString(decodeIdentify);

            (reqUserDto.RolId, reqUserDto.LastName) = _IsInstitution ? (7, "Institution") : (8, reqUserDto.LastName);

            if(reqUserDto.File == null)
            {
                await ShowAlert("Error en el registro", "Debe adjuntar una imagen para el perfil.", "error");
                return;
            }

            var response = await _registerService.CreateUserAsync(reqUserDto);
            if (response.IsSuccess)
            {
                await ShowAlert("Registro exitoso", "El usuario se registró correctamente.", "success");
                Navigation.NavigateTo("/" , forceLoad:true);
            }
            else
            {
                await ShowAlert("Error", "Hubo un problema al registrar el usuario. Inténtelo de nuevo.", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowAlert("Error", "Ocurrió un error inesperado.", "error");
        }
    }
    #endregion

    #region Utils
    private async Task NextStep()
    {
       
        var validationResult = validator.Validate(reqUserDto, options => options.IncludeRuleSets($"Step{step}"));

        if (validationResult != null && !validationResult.IsValid)
        {
            var errorMessage = string.Join("\n", validationResult.Errors.Select(e => e.ErrorMessage));
            await ShowAlert("Error de validación", errorMessage, "error");
            return;
        }

        if (step < 3)
        {
            step++;
            AdvanceProgress();
        }
    }

    private void PreviousStep()
    {
        if (step > 1)
        {
            step--;
            GoBackProgress();
        }
    }

    public void AdvanceProgress()
    {
        Value += 33.3;
        StateHasChanged();
    }

    public void GoBackProgress()
    {
        Value -= 33.3;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AdvanceProgress();
        }
        base.OnAfterRender(firstRender);
    }
    #endregion

    #region Alert
    private async Task ShowAlert(string title, string message, string? icon = "success")
    {
        await JS.InvokeVoidAsync("showSweetAlert", title, message, icon);
    }
    #endregion

    #region Navigate Methods
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    #endregion
}

<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function showSweetAlert(title, message, icon) {
        Swal.fire({
            title: title,
            text: message,
            icon: icon
        });
    }
</script>
