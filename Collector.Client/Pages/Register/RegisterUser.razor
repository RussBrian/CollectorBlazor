@page "/RegisterUser/{identification}/{email}/{code}"
@using Collector.Client.Dtos.Login
@using Collector.Client.Components.Shared
@using Collector.Client.Dtos.User
@using Collector.Client.Services.Register
@using System.Text
@inject IRegisterService _registerService
@inject NavigationManager Navigation

<div class="main-container">
    <div class="form-container">
        
        
        <ProgressBar Value="Value" />

        <div class="step-header">
            <MudText Typo="Typo.h6" Style="color:#7B885B; margin-left:10px">Paso @(step)-3</MudText>
            <MudText Typo="Typo.h6" Style="color:#8B8C89; margin-right: 1px;">Registrar Persona</MudText>
        </div>

        <div>
            <BackToLoginBtn ButtonText="Login" OnClick="NavigateToLogin"/>
        </div>

        @switch (step)
        {
            case 1:
                <Step1UserReg reqUserDto="reqUserDto"
                               />
                break;
            case 2:
                <Step2UserReg reqUserDto="reqUserDto"
                               />
                break;
            case 3:
                <Step3UserReg reqUserDto="reqUserDto"
                               />
                break;
            default:
                <Step1UserReg reqUserDto="reqUserDto"
                               />
                break;
        }

        <div class="buttons-container">
            @if (step < 3)
            {
                    <MudButtonComponent Text="Siguiente" OnClick="NextStep"
                                        Color="Color.Primary" Variant="Variant.Filled"
                                        Style="width:230px;" />
            }
            else
            {

                <MudButtonComponent Text="Registrar"
                                    OnClick="RegisterUserAsync"
                                    Color="Color.Primary" Variant="Variant.Filled"
                                    Style="width:230px;" />
            }
            @if (step > 1)
            {
                <MudButtonComponent Text="Paso anterior" OnClick="PreviousStep"
                                    Variant="Variant.Outlined" Style="background-color:transparent; 
                                    width: 155px; border: 3px solid #767572; color: #D1D5DB; 
                                    border-radius: 0.5rem;font-weight: bold;" />
            }
        </div>
    </div>
    <div class="aside-background"></div>
</div>


@code {

    public Step1UserReg? _step1UserReg;
    private int step = 1;
    public double Value { get; set; }
    private ReqUserDto reqUserDto = new();

    [Parameter]
    public string identification { get; set; } = string.Empty;
    [Parameter]
    public string email { get; set; } = string.Empty;
    [Parameter]
    public string code { get; set; } = string.Empty;

    private async Task RegisterUserAsync()
    {
        try
        {        

            var decodeIdentify = Convert.FromBase64String(identification);
            var decodeEmail = Convert.FromBase64String(email);
            var decodeCode = Convert.FromBase64String(code);

            string resultEmail = Encoding.UTF8.GetString(decodeEmail);

            UserEmailDto confirmEmail = new()
            {
                Email = resultEmail,
                Code = int.Parse(Encoding.UTF8.GetString(decodeCode))
            };

            reqUserDto.File = string.Empty;
            reqUserDto.Email = resultEmail;
            reqUserDto.Identification = Encoding.UTF8.GetString(decodeIdentify);

            var data = await _registerService.CreateUserAsync(reqUserDto);

            

            await _registerService.ConfirmEmail(confirmEmail);
          
        }
        catch (Exception ex)
        {
         
        }
    }

    #region Utils
    public void AdvanceProgress()
    {
        Value += 33.3;
        StateHasChanged();
    }

    public void GoBackProgress()
    {
        Value -= 33.3;
        StateHasChanged();
    }
    #endregion

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AdvanceProgress();
        }
        base.OnAfterRender(firstRender);
    }

    #region Step Methods
    private void NextStep()
    {
        if (step < 3)
            step++;
        AdvanceProgress();
    }

    private void PreviousStep()
    {
        if (step > 1)
            step--;
        GoBackProgress();
    }
    #endregion

    #region Navigate Methods
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    #endregion
    #endregion
}